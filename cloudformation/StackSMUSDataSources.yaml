AWSTemplateFormatVersion: 2010-09-09
Description: "Guidance to create demo data sources for Amazon SageMaker Unified Studio"
Parameters:

  RDSPort:
    Type: Number
    Default: 5432
    Description: The port Aurora PostgreSQL is listening on

  RDSEngineVersion:
    Type: String
    Default: "16.4"
    Description: The Aurora PostgreSQL engine version

  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The Project's SecurityGroupId

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId associated with the SageMaker Domain

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Selected Subnets. Private subnets are recommended. us-east-1 supports only 1b, 1c, 1d AZs for Redshift Serverless Endpoint.

  AmazonDataZoneProject:
    Type: String
    Description: The Project ID of the Project in Amazon SageMaker Unified Studio
    
  ProjectRoleARN:
    Type: String
    Description: The IAM Role ARN of the Project in Amazon SageMaker Unified Studio

Resources:

  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      DBSubnetGroupDescription: "Amazon RDS Subnet Group"
      DBSubnetGroupName: !Sub "default-${VpcId}"
      SubnetIds: !Ref SubnetIds

  RDSCluster:
    Type: "AWS::RDS::DBCluster"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      DBClusterIdentifier: demo-cluster
      ManageMasterUserPassword: true
      MasterUsername: "postgres"
      Engine: "aurora-postgresql"
      EngineVersion: !Ref RDSEngineVersion
      EnableHttpEndpoint: false
      Port: !Ref RDSPort
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      DBClusterParameterGroupName: !Ref ZeroETLDBClusterParameterGroup
      VpcSecurityGroupIds:
        - !Ref SecurityGroupId
      Tags:
        - Key: "AmazonDataZoneProject"
          Value: !Ref AmazonDataZoneProject
      
  RDSDBInstance:
    Type: "AWS::RDS::DBInstance"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      DBInstanceIdentifier: demo-instance
      #DBName: "postgres"
      Engine: "aurora-postgresql"
      DBClusterIdentifier: !Ref RDSCluster
      PubliclyAccessible: true
      DBInstanceClass: "db.t4g.medium"
      MonitoringInterval: 0
      Tags:
        - Key: "AmazonDataZoneProject"
          Value: !Ref AmazonDataZoneProject

  RedshiftAdminSecret:
    Type: AWS::SecretsManager::Secret
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      Description: AutoGenerated secret for the admin for Redshift Serverless
      #Only printable ASCII characters except for '/', '@', '"', ' ', '\', ''' may be used.
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: password
        PasswordLength: 8
        IncludeSpace: false
        ExcludePunctuation: true
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: AmazonDataZoneProject
          Value: !Ref AmazonDataZoneProject

  RedshiftServerlessNS:
    Type: AWS::RedshiftServerless::Namespace
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      NamespaceName: "demo-ns"
      DbName: "dev"
      DefaultIamRoleArn: !Ref ProjectRoleARN
      IamRoles:
        - !Ref ProjectRoleARN
      ManageAdminPassword: false
      AdminUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref RedshiftAdminSecret, ':SecretString:username}}' ] ]
      AdminUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref RedshiftAdminSecret, ':SecretString:password}}' ] ]
      Tags:
        - Key: AmazonDataZoneProject
          Value: !Ref AmazonDataZoneProject
      NamespaceResourcePolicy:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "redshift.amazonaws.com"
          Action: "redshift:AuthorizeInboundIntegration"
          Condition:
            StringEquals:
              aws:SourceArn: !GetAtt RDSCluster.DBClusterArn
        - Effect: "Allow"
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: "redshift:CreateInboundIntegration"

  RedshiftServerlessWG:
    Type: AWS::RedshiftServerless::Workgroup
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      WorkgroupName: "demo-wg"
      NamespaceName: !Ref RedshiftServerlessNS
      SecurityGroupIds:
        - !Ref SecurityGroupId
      SubnetIds: !Ref SubnetIds
      BaseCapacity: 8
      MaxCapacity: 512
      PubliclyAccessible: false
      ConfigParameters:
        - ParameterKey: enable_case_sensitive_identifier
          ParameterValue: true
      Tags:
        - Key: AmazonDataZoneProject
          Value: !Ref AmazonDataZoneProject

  ZeroETLDBClusterParameterGroup:    
    Type: AWS::RDS::DBClusterParameterGroup
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      DBClusterParameterGroupName: "zetl-dbcluster-params"
      Description: Aurora Cluster Parameter Group to support Zero-ETL
      Family: aurora-postgresql16
      Parameters:
        aurora.logical_replication_globaldb: 0
        aurora.logical_replication_backup: 0
        aurora.enhanced_logical_replication: 1
        rds.logical_replication: 1

  ZeroETLPG2Redshift:
    Type: AWS::RDS::Integration
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    DependsOn: ["RDSDBInstance","RedshiftServerlessWG"]
    Properties:
      DataFilter: "include: postgres.public.*"
      Description: "Zero-ETL integration between Aurora PostgreSQL and Redshift to replicate retail data"
      IntegrationName: "zetl-aurorapg"
      SourceArn: !GetAtt RDSCluster.DBClusterArn
      TargetArn: !GetAtt RedshiftServerlessNS.Namespace.NamespaceArn
      Tags:
        - Key: AmazonDataZoneProject
          Value: !Ref AmazonDataZoneProject
   
  DynamoDB:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      TableName: invoices
      AttributeDefinitions:
        - AttributeName: order_id
          AttributeType: N
        - AttributeName: invoice_number
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: order_id
          KeyType: HASH 
        - AttributeName: invoice_number
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: AmazonDataZoneProject
          Value: !Ref AmazonDataZoneProject
      ResourcePolicy:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Condition:
              StringEquals:
                aws:SourceAccount: !Sub "${AWS::AccountId}"
              ArnEquals:
                aws:SourceArn: !Sub "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:integration:*"
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/invoices"
            Action:
            - "dynamodb:ExportTableToPointInTime"
            - "dynamodb:DescribeTable"
            Effect: "Allow"
            Principal:
              Service: "redshift.amazonaws.com"
          - Condition:
              StringEquals:
                aws:SourceAccount: !Sub "${AWS::AccountId}"
              ArnEquals:
                aws:SourceArn: !Sub "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:integration:*"
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/invoices/export/*"
            Action: "dynamodb:DescribeExport"
            Effect: "Allow"
            Principal:
              Service: "redshift.amazonaws.com"
          - Condition:
              ArnEquals:
                aws:PrincipalArn:
                - !Ref ProjectRoleARN
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/invoices"
            Action:
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:DescribeTable"
            - "dynamodb:PartiQLSelect"
            Effect: "Allow"
            Principal: "*"
            Sid: "misc"

  Notebook:
    Type: AWS::SageMaker::NotebookInstance
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      InstanceType: "ml.t3.medium"
      RoleArn: !GetAtt NotebookExecutionRole.Arn
      DirectInternetAccess: "Enabled"
      LifecycleConfigName: !GetAtt LifecycleConfig.NotebookInstanceLifecycleConfigName
      DefaultCodeRepository: "https://github.com/Natallia-Bahlai/sagemaker-unified-studio-quick-start.git"
      SecurityGroupIds: 
        - Ref: SecurityGroupId
      SubnetId: !Select 
        - 0
        - !Ref SubnetIds
      Tags:
        - Key: AmazonDataZoneProject
          Value: !Ref AmazonDataZoneProject
                        

  LifecycleConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      NotebookInstanceLifecycleConfigName: !Sub "lifecycle-onstart"
      OnStart:
        - Content:
            Fn::Base64:
              !Sub |
                #!/bin/bash
                set -e
                touch /etc/profile.d/jupyter-env.sh
                echo "export PG_HOST=${RDSCluster.Endpoint.Address}" >> /etc/profile.d/jupyter-env.sh
                echo "export PG_SECRET_ARN=${RDSCluster.MasterUserSecret.SecretArn}" >> /etc/profile.d/jupyter-env.sh
                # restart command is dependent on current running Amazon Linux and JupyterLab
                CURR_VERSION=$(cat /etc/os-release)
                if [[ $CURR_VERSION == *$"http://aws.amazon.com/amazon-linux-ami/"* ]]; then
                    sudo initctl restart jupyter-server --no-wait
                else
                    sudo systemctl --no-block restart jupyter-server.service
                fi
                
                #EOF

  NotebookExecutionRole: 
    Type: AWS::IAM::Role
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
                  
            Principal: 
              Service: 
                - "sagemaker.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Policies:
      - PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Resource: !GetAtt RDSCluster.MasterUserSecret.SecretArn
            Action:
            - "secretsmanager:GetSecretValue"
            - "secretsmanager:DescribeSecret"
            Effect: "Allow"
        PolicyName: "sm"

Outputs:
  AuroraPGHost:
    Description: The Aurora PostgreSQL host
    Value: !GetAtt RDSCluster.Endpoint.Address
    
  AuroraPGPort:
    Description: The Aurora PostgreSQL port
    Value: !GetAtt RDSCluster.Endpoint.Port
    
  AuroraPGDB:
    Description: The Aurora PostgreSQL database name.
    Value: "postgres"
    
  AuroraPGSecretArn:
    Description: The Aurora PostgreSQL secret arn
    Value: !GetAtt RDSCluster.MasterUserSecret.SecretArn

  RedshiftHost:
    Description: The Redshift Serverless host
    Value: !GetAtt RedshiftServerlessWG.Workgroup.Endpoint.Address

  RedshiftPort:
    Description: The Redshift Serverless port
    Value: "5439"
    #!GetAtt RedshiftServerlessWG.Workgroup.Endpoint.Port

  RedshiftDB:
    Description: The Redshift Serverless database name
    Value: !GetAtt RedshiftServerlessNS.Namespace.DbName
    
  RedshiftSecretArn:
    Description: The Redshift Serverless secret arn
    Value: !Ref RedshiftAdminSecret